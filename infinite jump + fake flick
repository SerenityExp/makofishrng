-- Services
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- Character / RootPart
local character = player.Character or player.CharacterAdded:Wait()
local root = character:WaitForChild("HumanoidRootPart")

-- Flick Config
local flickEnabled = true
local flickMode = "Default" -- "Default", "BackUp", "Up"
local flickModes = {"Default", "BackUp", "Up"}
local flickModeIndex = 1
local knockbackForce = 40
local flickDuration = 0.2
local flickCooldown = 0.5
local canFlick = true

-- Infinite Jump Config
local infiniteJumpEnabled = false
local canJump = true

-- UI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "WallhopAndJumpGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Flick Label
local flickLabel = Instance.new("TextLabel")
flickLabel.Size = UDim2.new(0, 200, 0, 25)
flickLabel.Position = UDim2.new(1, -210, 0, 10)
flickLabel.AnchorPoint = Vector2.new(1, 0)
flickLabel.BackgroundTransparency = 1
flickLabel.TextColor3 = Color3.new(1, 1, 1)
flickLabel.TextStrokeTransparency = 0.5
flickLabel.Font = Enum.Font.GothamBold
flickLabel.TextSize = 18
flickLabel.Text = "Flick: ON"
flickLabel.Parent = screenGui

-- Flick Mode Label
local flickModeLabel = Instance.new("TextLabel")
flickModeLabel.Size = UDim2.new(0, 200, 0, 25)
flickModeLabel.Position = UDim2.new(1, -210, 0, 70)
flickModeLabel.AnchorPoint = Vector2.new(1, 0)
flickModeLabel.BackgroundTransparency = 1
flickModeLabel.TextColor3 = Color3.new(1, 1, 1)
flickModeLabel.TextStrokeTransparency = 0.5
flickModeLabel.Font = Enum.Font.GothamBold
flickModeLabel.TextSize = 18
flickModeLabel.Text = "Flick Mode: " .. flickMode
flickModeLabel.Parent = screenGui

-- Jump Label
local jumpLabel = Instance.new("TextLabel")
jumpLabel.Size = UDim2.new(0, 200, 0, 25)
jumpLabel.Position = UDim2.new(1, -210, 0, 40)
jumpLabel.AnchorPoint = Vector2.new(1, 0)
jumpLabel.BackgroundTransparency = 1
jumpLabel.TextColor3 = Color3.new(1, 1, 1)
jumpLabel.TextStrokeTransparency = 0.5
jumpLabel.Font = Enum.Font.GothamBold
jumpLabel.TextSize = 18
jumpLabel.Text = "Infinite Jump: OFF"
jumpLabel.Parent = screenGui

-- Flick Mode Buttons (Optional manual select)
local function createFlickButton(text, posY, mode)
	local button = Instance.new("TextButton")
	button.Size = UDim2.new(0, 140, 0, 25)
	button.Position = UDim2.new(1, -150, 0, posY)
	button.AnchorPoint = Vector2.new(1, 0)
	button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	button.BorderSizePixel = 0
	button.TextColor3 = Color3.new(1, 1, 1)
	button.Font = Enum.Font.Gotham
	button.TextSize = 14
	button.Text = text
	button.Parent = screenGui

	button.MouseButton1Click:Connect(function()
		flickMode = mode
		flickModeLabel.Text = "Flick Mode: " .. flickMode
	end)
end

createFlickButton("Default Flick", 100, "Default")
createFlickButton("Back + Up Flick", 130, "BackUp")
createFlickButton("Up Flick", 160, "Up")

-- Flick Function
local function flickBack()
	if not flickEnabled or not canFlick or not root then return end
	canFlick = false

	local velocityVector = Vector3.zero
	if flickMode == "Default" then
		velocityVector = -root.CFrame.LookVector * knockbackForce
	elseif flickMode == "BackUp" then
		velocityVector = (-root.CFrame.LookVector * knockbackForce * 0.7) + Vector3.new(0, knockbackForce * 0.5, 0)
	elseif flickMode == "Up" then
		velocityVector = Vector3.new(0, knockbackForce, 0)
	end

	local bodyVelocity = Instance.new("BodyVelocity")
	bodyVelocity.Velocity = velocityVector
	bodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
	bodyVelocity.P = 1e4
	bodyVelocity.Parent = root

	task.delay(flickDuration, function()
		bodyVelocity:Destroy()
	end)

	task.delay(flickCooldown, function()
		canFlick = true
	end)
end

-- Toggle Flick
local function toggleFlick()
	flickEnabled = not flickEnabled
	flickLabel.Text = "Flick: " .. (flickEnabled and "ON" or "OFF")
end

-- Toggle Infinite Jump
local function toggleInfiniteJump()
	infiniteJumpEnabled = not infiniteJumpEnabled
	jumpLabel.Text = "Infinite Jump: " .. (infiniteJumpEnabled and "ON" or "OFF")
end

-- Cycle Flick Mode
local function cycleFlickMode()
	flickModeIndex = flickModeIndex % #flickModes + 1
	flickMode = flickModes[flickModeIndex]
	flickModeLabel.Text = "Flick Mode: " .. flickMode
end

-- Input Bindings
UIS.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed or UIS:GetFocusedTextBox() then return end

	if input.KeyCode == Enum.KeyCode.F then
		flickBack()
	elseif input.KeyCode == Enum.KeyCode.T then
		toggleFlick()
	elseif input.KeyCode == Enum.KeyCode.Z then
		toggleInfiniteJump()
	elseif input.KeyCode == Enum.KeyCode.P then
		screenGui.Enabled = not screenGui.Enabled
	elseif input.KeyCode == Enum.KeyCode.R then
		cycleFlickMode()
	end
end)

-- Infinite Jump Logic
UIS.JumpRequest:Connect(function()
	if infiniteJumpEnabled and player.Character and canJump then
		local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
		if humanoid then
			humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			canJump = false
			task.wait(humanoid.JumpPower / 100)
			canJump = true
		end
	end
end)

-- ðŸ›  Character Respawn Fix
player.CharacterAdded:Connect(function(char)
	character = char
	root = char:WaitForChild("HumanoidRootPart")
end)

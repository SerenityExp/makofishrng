local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer

local gui = Instance.new("ScreenGui")
gui.Name = "Sapphire"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

-- Dim background with slight blue tint
local dimmer = Instance.new("Frame")
dimmer.Size = UDim2.new(1, 0, 1, 0)
dimmer.BackgroundColor3 = Color3.fromRGB(10, 25, 60) -- dark blue tint
dimmer.BackgroundTransparency = 0.7
dimmer.ZIndex = 0
dimmer.Parent = gui

-- Main GUI
local main = Instance.new("Frame")
main.Size = UDim2.new(0, 300, 0, 600)
main.Position = UDim2.new(0.5, -150, 0.5, -300)
main.AnchorPoint = Vector2.new(0.5, 0.5)
main.BackgroundColor3 = Color3.fromRGB(79, 195, 247)
main.ZIndex = 1
main.Active = true
main.Draggable = true
main.Parent = gui
Instance.new("UICorner", main).CornerRadius = UDim.new(0, 12)

-- Title bar (label)
local titleBar = Instance.new("TextLabel")
titleBar.Size = UDim2.new(1, 0, 0, 40)
titleBar.BackgroundColor3 = Color3.fromRGB(60, 180, 220)
titleBar.Text = "Sapphire"
titleBar.Font = Enum.Font.GothamBold
titleBar.TextSize = 24
titleBar.TextColor3 = Color3.new(1, 1, 1)
titleBar.ZIndex = 2
titleBar.Parent = main
Instance.new("UICorner", titleBar).CornerRadius = UDim.new(0, 12)

-- Search bar
local searchBox = Instance.new("TextBox")
searchBox.PlaceholderText = "Search.."
searchBox.Text = ""
searchBox.ClearTextOnFocus = false
searchBox.Size = UDim2.new(1, -20, 0, 30)
searchBox.Position = UDim2.new(0, 10, 0, 50)
searchBox.BackgroundColor3 = Color3.fromRGB(230, 240, 255)
searchBox.TextColor3 = Color3.new(0, 0, 0)
searchBox.TextSize = 18
searchBox.Font = Enum.Font.Gotham
searchBox.ZIndex = 2
searchBox.Parent = main
Instance.new("UICorner", searchBox).CornerRadius = UDim.new(0, 8)

-- Scrolling frame for buttons
local buttonHolder = Instance.new("ScrollingFrame")
buttonHolder.Size = UDim2.new(1, -20, 1, -100)
buttonHolder.Position = UDim2.new(0, 10, 0, 90)
buttonHolder.BackgroundColor3 = Color3.fromRGB(79, 195, 247)
buttonHolder.BackgroundTransparency = 1  -- Make background fully transparent
buttonHolder.BorderSizePixel = 0
buttonHolder.ScrollBarThickness = 8
buttonHolder.ScrollBarImageTransparency = 1  -- Make scrollbar invisible
buttonHolder.ZIndex = 2
buttonHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
buttonHolder.Parent = main
Instance.new("UICorner", buttonHolder).CornerRadius = UDim.new(0, 10)



local layout = Instance.new("UIListLayout")
layout.Padding = UDim.new(0, 8)
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Parent = buttonHolder

-- Update CanvasSize when layout changes (auto scroll size)
layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
	buttonHolder.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
end)

local TweenInfoFade = TweenInfo.new(0.3)

local states = {}
local flyConnection, spinConnection, espConnection, chamsConnection = nil, nil, nil, nil
local destructionConnection = nil

local lp = player
local char = nil
local humanoid = nil

local function updateChar()
	char = lp.Character
	humanoid = char and char:FindFirstChildOfClass("Humanoid")
end

updateChar()
lp.CharacterAdded:Connect(updateChar)

-- Helper to create buttons
local function createFeatureButton(name, callback)
	local btn = Instance.new("TextButton")
	btn.Name = name
	btn.Size = UDim2.new(1, 0, 0, 40)
	btn.BackgroundColor3 = Color3.fromRGB(100, 210, 250)
	btn.Text = name .. ": OFF"
	btn.Font = Enum.Font.GothamBold
	btn.TextSize = 20
	btn.TextColor3 = Color3.new(1, 1, 1)
	btn.ZIndex = 2
	btn.AutoButtonColor = false
	btn.Parent = buttonHolder
	Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 10)

	states[name] = false

	btn.MouseButton1Click:Connect(function()
		states[name] = not states[name]
		btn.Text = name .. ": " .. (states[name] and "ON" or "OFF")
		btn.BackgroundColor3 = states[name] and Color3.fromRGB(50, 180, 90) or Color3.fromRGB(100, 210, 250)
		callback(states[name])
	end)
end

-- Touch Fling
createFeatureButton("Touch Fling", function(state)
	if state then
		task.spawn(function()
			while states["Touch Fling"] do
				RunService.Heartbeat:Wait()
				local c = lp.Character
				local hrp = c and c:FindFirstChild("HumanoidRootPart")
				if hrp then
					local vel = hrp.Velocity
					hrp.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)
					RunService.RenderStepped:Wait()
					hrp.Velocity = vel
					RunService.Stepped:Wait()
					hrp.Velocity = vel + Vector3.new(0, 0.1, 0)
				end
			end
		end)
	end
end)

-- Destruction feature integration
createFeatureButton("Destruction", function(state)
	if state then
		-- Ensure Touch Fling is ON while Destruction is ON
		if not states["Touch Fling"] then
			states["Touch Fling"] = true
			buttonHolder:FindFirstChild("Touch Fling").Text = "Touch Fling: ON"
			buttonHolder:FindFirstChild("Touch Fling").BackgroundColor3 = Color3.fromRGB(50, 180, 90)
			-- Start Touch Fling effect
			task.spawn(function()
				while states["Touch Fling"] and states["Destruction"] do
					RunService.Heartbeat:Wait()
					local c = lp.Character
					local hrp = c and c:FindFirstChild("HumanoidRootPart")
					if hrp then
						local vel = hrp.Velocity
						hrp.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)
						RunService.RenderStepped:Wait()
						hrp.Velocity = vel
						RunService.Stepped:Wait()
						hrp.Velocity = vel + Vector3.new(0, 0.1, 0)
					end
				end
			end)
		end

		-- Start teleporting loop to players
		destructionConnection = task.spawn(function()
			while states["Destruction"] do
				for _, plr in ipairs(Players:GetPlayers()) do
					if plr ~= lp and states["Destruction"] and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local targetHRP = plr.Character.HumanoidRootPart
						local hrp = char and char:FindFirstChild("HumanoidRootPart")
						if hrp then
							local startTime = tick()
							while tick() - startTime < 3 and states["Destruction"] do
								hrp.CFrame = targetHRP.CFrame
								RunService.Heartbeat:Wait()
							end
						end
					end
					if not states["Destruction"] then break end
				end
				-- Small delay to prevent potential infinite loop speed issues
				task.wait(0.1)
			end
		end)
	else
		-- Stop teleport loop
		if destructionConnection then
			task.cancel(destructionConnection)
			destructionConnection = nil
		end

		-- If Touch Fling was turned on only by Destruction, turn it off
		if states["Touch Fling"] and not states["Destruction"] then
			states["Touch Fling"] = false
			local btn = buttonHolder:FindFirstChild("Touch Fling")
			if btn then
				btn.Text = "Touch Fling: OFF"
				btn.BackgroundColor3 = Color3.fromRGB(100, 210, 250)
			end
		end
	end
end)

-- Sit
createFeatureButton("Sit", function(state)
	if humanoid then
		humanoid.Sit = state
	end
end)

-- Fly
createFeatureButton("Fly", function(state)
	if not char or not humanoid then return end
	if state then
		local hrp = char:FindFirstChild("HumanoidRootPart")
		if not hrp then return end
		local bodyVelocity = Instance.new("BodyVelocity")
		bodyVelocity.Name = "FlyVelocity"
		bodyVelocity.MaxForce = Vector3.new(1e5,1e5,1e5)
		bodyVelocity.Velocity = Vector3.new(0,0,0)
		bodyVelocity.Parent = hrp

		flyConnection = RunService.Heartbeat:Connect(function()
			local direction = Vector3.new(0,0,0)
			if UserInputService:IsKeyDown(Enum.KeyCode.W) then
				direction = direction + (hrp.CFrame.LookVector)
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.S) then
				direction = direction - (hrp.CFrame.LookVector)
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.A) then
				direction = direction - (hrp.CFrame.RightVector)
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.D) then
				direction = direction + (hrp.CFrame.RightVector)
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
				direction = direction + Vector3.new(0,1,0)
			end
			if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
				direction = direction - Vector3.new(0,1,0)
			end
			if direction.Magnitude > 0 then
				bodyVelocity.Velocity = direction.Unit * 50
			else
				bodyVelocity.Velocity = Vector3.new(0,0,0)
			end
		end)
	else
		local hrp = char and char:FindFirstChild("HumanoidRootPart")
		if hrp then
			local bv = hrp:FindFirstChild("FlyVelocity")
			if bv then bv:Destroy() end
		end
		if flyConnection then
			flyConnection:Disconnect()
			flyConnection = nil
		end
	end
end)

-- Spin
createFeatureButton("Spin", function(state)
	if not char then return end
	local hrp = char:FindFirstChild("HumanoidRootPart")
	if not hrp then return end
	if state then
		spinConnection = RunService.Heartbeat:Connect(function()
			hrp.CFrame = hrp.CFrame * CFrame.Angles(0, math.rad(10), 0)
		end)
	else
		if spinConnection then
			spinConnection:Disconnect()
			spinConnection = nil
		end
	end
end)

-- Walk Speed Boost
createFeatureButton("Walk Speed Boost", function(state)
	if humanoid then
		humanoid.WalkSpeed = state and 100 or 16
	end
end)

-- Jump Boost
createFeatureButton("Jump Boost", function(state)
	if humanoid then
		humanoid.JumpPower = state and 150 or 50
	end
end)

-- Invisible
createFeatureButton("Invisible", function(state)
	if char then
		for _, part in ipairs(char:GetChildren()) do
			if part:IsA("BasePart") then
				part.Transparency = state and 1 or 0
			elseif part:IsA("Decal") then
				part.Transparency = state and 1 or 0
			elseif part:IsA("Accessory") and part:FindFirstChild("Handle") then
				part.Handle.Transparency = state and 1 or 0
			end
		end
	end
end)

-- No Clip
createFeatureButton("No Clip", function(state)
	if not char then return end
	for _, part in ipairs(char:GetChildren()) do
		if part:IsA("BasePart") then
			part.CanCollide = not state
		end
	end
end)

-- Jump (instant)
createFeatureButton("Jump", function(state)
	if humanoid and state then
		humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	end
end)

-- Sit Toggle (same as Sit but separate)
createFeatureButton("Sit Toggle", function(state)
	if humanoid then
		humanoid.Sit = state
	end
end)

-- Super Jump
createFeatureButton("Super Jump", function(state)
	if humanoid then
		humanoid.JumpPower = state and 200 or 50
	end
end)

-- Teleport to mouse
createFeatureButton("Teleport To Mouse", function(state)
	if state then
		local mouse = player:GetMouse()
		local connection
		connection = mouse.Button1Down:Connect(function()
			if char and char:FindFirstChild("HumanoidRootPart") then
				local hrp = char.HumanoidRootPart
				local target = mouse.Hit + Vector3.new(0, 3, 0)
				hrp.CFrame = CFrame.new(target.X, target.Y, target.Z)
			end
		end)
		states["Teleport To Mouse Connection"] = connection
	else
		local conn = states["Teleport To Mouse Connection"]
		if conn then
			conn:Disconnect()
			states["Teleport To Mouse Connection"] = nil
		end
	end
end)

-- ESP Boxes
local espBoxes = {}

local function createBoxForPlayer(plr)
	local box = Drawing and Drawing.new and Drawing.new("Square")
	if not box then return end
	box.Color = Color3.fromRGB(0, 170, 255)
	box.Thickness = 2
	box.Transparency = 1
	box.Filled = false
	box.Visible = false
	return box
end

createFeatureButton("ESP Boxes", function(state)
	if state then
		-- Create boxes for all players except local
		for _, p in ipairs(Players:GetPlayers()) do
			if p ~= player and not espBoxes[p] then
				espBoxes[p] = createBoxForPlayer(p)
			end
		end

		-- Update loop
		espConnection = RunService.RenderStepped:Connect(function()
			local camera = Workspace.CurrentCamera
			for plr, box in pairs(espBoxes) do
				if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
					local hrp = plr.Character.HumanoidRootPart
					local pos, onScreen = camera:WorldToViewportPoint(hrp.Position)
					if onScreen then
						local size = 50 / pos.Z
						box.Position = Vector2.new(pos.X - size / 2, pos.Y - size / 2)
						box.Size = Vector2.new(size, size)
						box.Visible = true
					else
						box.Visible = false
					end
				else
					box.Visible = false
				end
			end
		end)
	else
		if espConnection then
			espConnection:Disconnect()
			espConnection = nil
		end
		-- Remove boxes
		for plr, box in pairs(espBoxes) do
			box.Visible = false
			box:Remove()
			espBoxes[plr] = nil
		end
	end
end)

-- Chams (Highlight outlines)
local chamsHighlights = {}

createFeatureButton("Chams", function(state)
	if state then
		for _, p in ipairs(Players:GetPlayers()) do
			if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
				local highlight = Instance.new("Highlight")
				highlight.Name = "SapphireChamsHighlight"
				highlight.Adornee = p.Character
				highlight.FillColor = Color3.fromRGB(79, 195, 247)
				highlight.OutlineColor = Color3.fromRGB(25, 150, 255)
				highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
				highlight.Parent = gui
				chamsHighlights[p] = highlight
			end
		end

		chamsConnection = Players.PlayerRemoving:Connect(function(plr)
			if chamsHighlights[plr] then
				chamsHighlights[plr]:Destroy()
				chamsHighlights[plr] = nil
			end
		end)
		Players.PlayerAdded:Connect(function(plr)
			if states["Chams"] and plr ~= player then
				plr.CharacterAdded:Connect(function(char)
					task.wait(1)
					if char and states["Chams"] then
						local highlight = Instance.new("Highlight")
						highlight.Name = "SapphireChamsHighlight"
						highlight.Adornee = char
						highlight.FillColor = Color3.fromRGB(79, 195, 247)
						highlight.OutlineColor = Color3.fromRGB(25, 150, 255)
						highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
						highlight.Parent = gui
						chamsHighlights[plr] = highlight
					end
				end)
			end
		end)
	else
		for plr, highlight in pairs(chamsHighlights) do
			highlight:Destroy()
		end
		chamsHighlights = {}
		if chamsConnection then
			chamsConnection:Disconnect()
			chamsConnection = nil
		end
	end
end)

local guiVisible = true
local fadeDuration = 0.4

-- Store original dimmer transparency so we can restore it
local originalDimmerTransparency = dimmer.BackgroundTransparency

local function tweenTransparency(instance, targetTransparency)
	if instance:IsA("TextLabel") or instance:IsA("TextButton") or instance:IsA("TextBox") then
		TweenService:Create(instance, TweenInfo.new(fadeDuration), {
			TextTransparency = targetTransparency,
			BackgroundTransparency = targetTransparency > 0 and 1 or 0
		}):Play()
		
	elseif instance:IsA("Frame") or instance:IsA("ScrollingFrame") or instance:IsA("ScrollingTextBox") then
		TweenService:Create(instance, TweenInfo.new(fadeDuration), {
			BackgroundTransparency = targetTransparency > 0 and 1 or 0
		}):Play()
		
		-- Extra: fade scroll bar images inside ScrollingFrame
		if instance:IsA("ScrollingFrame") then
			for _, child in ipairs(instance:GetChildren()) do
				if child:IsA("ImageLabel") then
					TweenService:Create(child, TweenInfo.new(fadeDuration), {
						ImageTransparency = targetTransparency > 0 and 1 or 0
					}):Play()
				end
			end
		end
		
	elseif instance:IsA("ImageLabel") or instance:IsA("ImageButton") then
		TweenService:Create(instance, TweenInfo.new(fadeDuration), {
			ImageTransparency = targetTransparency > 0 and 1 or 0,
			BackgroundTransparency = targetTransparency > 0 and 1 or 0
		}):Play()
	end
end

local function fadeGui(targetTransparency)
	-- Fade the dimmer specially, restore original when fading in
	if targetTransparency == 0 then
		TweenService:Create(dimmer, TweenInfo.new(fadeDuration), {
			BackgroundTransparency = originalDimmerTransparency
		}):Play()
	else
		TweenService:Create(dimmer, TweenInfo.new(fadeDuration), {
			BackgroundTransparency = 1
		}):Play()
	end
	
	-- Fade main frame and descendants
	tweenTransparency(main, targetTransparency)
	
	for _, descendant in ipairs(main:GetDescendants()) do
		if descendant:IsA("TextLabel") or descendant:IsA("TextButton") or descendant:IsA("TextBox") 
			or descendant:IsA("Frame") or descendant:IsA("ScrollingFrame") or descendant:IsA("ImageLabel") or descendant:IsA("ImageButton") then
			tweenTransparency(descendant, targetTransparency)
		end
	end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if not gameProcessed then
		if input.KeyCode == Enum.KeyCode.P then
			if guiVisible then
				fadeGui(1) -- fade out (fully transparent)
			else
				fadeGui(0) -- fade in (restore original)
			end
			guiVisible = not guiVisible
		end
	end
end)
